<?php
require_once "<%= node['consul']['config_dir'] %>/JbServerHelpers/src/Consul.php";
require_once "<%= node['consul']['config_dir'] %>/JbServerHelpers/src/JbRedis.php";

//Current instance configurations
define('CURRENT_IP', @$argv[1] ?: false);
define('CURRENT_PORT', @$argv[2] ?: false);
define('CONSUL_BASE_URL', 'http://localhost:<%= node['consul']['ports']['http'] || 8500 %>/v1');
define('CONSUL_CONFIG_PATH', '<%= node['consul']['config_dir'] %>');
define('CONSUL_BIN', '<%= node['consul']['install_dir'] %>/consul');
define('CONSUL_PORT', '<%= node['consul']['ports']['serf_lan'] || 8301 %>');
define('REDIS_CONFIG_PATH', '<%= @redis_path %>');
define('SENTINEL_NAME', '<%= node['redisio']['sentinels'][0]['name'] %>');
define('SENTINEL_QUORUM', '<%= node['redisio']['sentinels'][0]['quorum_count'] %>');
define('SENTINEL_PORT', '<%= node['redisio']['sentinels'][0]['port'] %>');
putenv('PATH='.getenv('PATH').':/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin');

$consul = new Consul(CONSUL_BASE_URL, CONSUL_CONFIG_PATH, CONSUL_BIN, CONSUL_PORT);
$redis = new JbRedis(CURRENT_IP, CURRENT_PORT, REDIS_CONFIG_PATH, SENTINEL_NAME, SENTINEL_QUORUM);

//If the service is already runing there is nothing else to configure
$ping = $redis->runCommand('ping');
if(isset($ping[0]) && $ping[0] == 'PONG'){
    //Sometimes when the server with the master redis service is stoped when it comes back up it will become a slave of it self
    $slaveof = $redis->runCommand('CONFIG GET slaveof');
    if(count($slaveof) == 2){
        @list($ip, $port) = @explode(' ', end($slaveof));
        if($ip == CURRENT_IP && $port == CURRENT_PORT)
            $redis->runCommand('slaveof no one');
        
        // Fix tags on redis
        $consul->loadServiceConfiguration('redis' . CURRENT_PORT);
        $tags = @$consul->getServiceConfiguration('redis' . CURRENT_PORT)['service']['tags'] ?: [];
        
        $currentTag = empty($ip)? 'master': 'slave';
        $oldTag     = $currentTag === 'master'? 'slave': 'master';
        
        // If tags are wrong, fix them
        if (!in_array($currentTag, $tags) || in_array($oldTag, $tags)) {
        
            $consul->removeTagFromService('redis' . CURRENT_PORT, $oldTag);
            $consul->addTagToService('redis' . CURRENT_PORT, $currentTag);
            $consul->saveServiceConfiguration('redis' . CURRENT_PORT);
            $consul->reloadAgent();
        }
    }
    exit();
}

//Beacuse we depend on consul to elect the redis master, we have to wait until there is a consul leader before we can continue
$consul_leader = $consul->getLeader();
if(empty($consul_leader))
    exit();

//Check if there is already a master runing
$redis_masters = $consul->getService('redis', 'master');
if (!empty($redis_masters)) {
    //Get the right redis master from consul, it could happen that the service is still marked as master on consul from a failover
    $redis_master = array();
    foreach ($redis_masters as $rm) {
        if($rm['Address'] != CURRENT_IP || $rm['ServicePort'] != CURRENT_PORT)
            $redis_master = $rm;
    }

    if (!empty($redis_master)){
        //Get the current node from consul
        $current_node = $consul->getCurrentNode();

        //Start redis server as a slave of the current master
        $redis->setMaster($redis_master['Address'], $redis_master['ServicePort']);
        $redis->saveConfiguration();
        $redis->startService();

        //Load the configuration of the current instance
        $consul->loadServiceConfiguration('redis' . CURRENT_PORT);
        //Make sure it doesn't have a master tag, this could happen on a reboot
        $consul->removeTagFromService('redis' . CURRENT_PORT, 'master');
        $consul->addTagToService('redis' . CURRENT_PORT, 'slave');
        $consul->saveServiceConfiguration('redis' . CURRENT_PORT);
        $consul->reloadAgent();
        exit();
    }

}

//Get the lock to start the leader election
$session_id = $consul->createSession();
$redis_lock = $consul->getLock('redis_master', $session_id, CURRENT_IP . ':' . CURRENT_PORT, '30s');
if($redis_lock) {
    //While trying to get the lock a new master might be elected, so we need to check again
    $redis_master = $consul->getService('redis', 'master');
    if(empty($redis_master)){
        //Start redis server as master
        $redis->startService();

        //Update the consul service with the new master
        $consul->loadServiceConfiguration('redis' . CURRENT_PORT);
        //Make sure it doesn't have a slave tag
        $consul->removeTagFromService('redis' . CURRENT_PORT, 'slave');
        $consul->addTagToService('redis' . CURRENT_PORT, 'master');
        $consul->saveServiceConfiguration('redis' . CURRENT_PORT);
        $consul->reloadAgent();

        //Wait until consul starts returning the 
        while (empty($consul->getService('redis', 'master')))
            sleep(10);
    }
    //Releses the current consul lock
    $consul->releaseLock('redis_master', $session_id);
}

//Deltes current consul session
$consul->destroySession($session_id);