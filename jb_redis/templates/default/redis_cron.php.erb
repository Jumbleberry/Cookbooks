<?php
require_once "<%= node['consul']['config_dir'] %>/JbServerHelpers/src/Consul.php";
require_once "<%= node['consul']['config_dir'] %>/JbServerHelpers/src/JbRedis.php";

//Current instance configurations
define('CURRENT_IP', @$argv[1] ?: false);
define('CURRENT_PORT', @$argv[2] ?: false);
define('CONSUL_BASE_URL', 'http://localhost:<%= node['consul']['ports']['http'] || 8500 %>/v1');
define('CONSUL_CONFIG_PATH', '<%= node['consul']['config_dir'] %>');
define('CONSUL_BIN', '<%= node['consul']['install_dir'] %>/consul');
define('CONSUL_PORT', '<%= node['consul']['ports']['serf_lan'] || 8301 %>');
define('REDIS_CONFIG_PATH', '<%= @redis_path %>');
define('SENTINEL_NAME', '<%= node['redisio']['sentinels'][0]['name'] %>');
define('SENTINEL_QUORUM', '<%= node['redisio']['sentinels'][0]['quorum_count'] %>');
putenv('PATH='.getenv('PATH').':/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin');

$consul = new Consul(CONSUL_BASE_URL, CONSUL_CONFIG_PATH, CONSUL_BIN, CONSUL_PORT);
$redis = new JbRedis(CURRENT_IP, CURRENT_PORT, REDIS_CONFIG_PATH, SENTINEL_NAME, SENTINEL_QUORUM);

//Beacuse we depend on consul to elect the redis master, we have to wait until there is a consul leader before we can continue
$consul_leader = $consul->getLeader();
if(empty($consul_leader))
    exit();

// Tag for the non-master instance
// If server is not running redis, it's simply a sentinel service, otherwise it would be a slave
$instance_type = (!CURRENT_IP && !CURRENT_PORT)? 'sentinel': 'slave';

//Check if there is already a master runing
$redis_master = $consul->getService('redis', 'master');
if (!empty($redis_master)) {
    //Get the first service from the services array
    $redis_master = $redis_master[0];
    // Only if the current master is not the current service
    if (($redis_master['Address'] != CURRENT_IP || $redis_master['ServicePort'] != CURRENT_PORT)) {
        //Get the current node from consul
        $current_node = $consul->getCurrentNode();

        //If the service already have the tag, it means that it was already started and added to consul
        if(isset($current_node['Services']['redis'.CURRENT_PORT]) && in_array($instance_type, $current_node['Services']['redis'.CURRENT_PORT]['Tags']))
            exit();

        //Start redis server as a slave of the current master (if we're not a sentinel server)
        if ($instance_type != 'sentinel'){
            $redis->setMaster($redis_master['Address'], $redis_master['ServicePort']);
            $redis->saveConfiguration();
            $redis->startService();
        }
        
        //Load sentinel configurations
        $redis->loadSentinelConfiguration();
        //Set the master to monitor
        $redis->setSentinelMonitor($redis_master['Address'], $redis_master['ServicePort']);
        //Save the new configurations
        $redis->saveSentinelConfiguration();
        //Restart the service
        $redis->startService('_sentinel_' . SENTINEL_NAME);

        //Load the configuration of the current instance
        $consul->loadServiceConfiguration('redis' . CURRENT_PORT);
        $consul->addTagToService('redis' . CURRENT_PORT, $instance_type);
        $consul->saveServiceConfiguration('redis' . CURRENT_PORT);
        $consul->reloadAgent();
    }
    exit();
}

// Never attempt to nominate self as a master if we're not running redis
if ($instance_type == 'sentinel')
    exit();

//Get the lock to start the leader election
$session_id = $consul->createSession();
$redis_lock = $consul->getLock('redis_master', $session_id, CURRENT_IP . ':' . CURRENT_PORT, array(), '30s');
if($redis_lock) {
    $redis_master = $consul->getService('redis', 'master');
    if(empty($redis_master)){
        //Start redis server as master
        $redis->startService();

        //Start sentinel with the new master
        $redis->loadSentinelConfiguration();
        $redis->setSentinelMonitor(CURRENT_IP, CURRENT_PORT);
        $redis->saveSentinelConfiguration();
        $redis->startService('_sentinel_' . SENTINEL_NAME);

        //Update the consul service with the new master
        $consul->loadServiceConfiguration('redis' . CURRENT_PORT);
        $consul->addTagToService('redis' . CURRENT_PORT, 'master');
        $consul->saveServiceConfiguration('redis' . CURRENT_PORT);
        $consul->reloadAgent();

        //Wait until consul starts returning the 
        while (empty($consul->getService('redis', 'master')))
            sleep(10);
    }
    //Releses the current consul lock
    $consul->releaseLock('redis_master', $session_id);
}

//Deltes current consul session
$consul->destroySession($session_id);