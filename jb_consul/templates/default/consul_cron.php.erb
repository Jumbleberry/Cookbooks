<?php
/**
 * Setup consul cluster for the Jumbleberry Infrastructure
 */

require_once "<%= node['consul']['config_dir'] %>/JbServerHelpers/src/Consul.php";
require_once "<%= node['consul']['config_dir'] %>/JbServerHelpers/src/Aws.php";

//Server environment
define("ENVIRONMENT", '<%= node['environment'] %>');

$consul = new Consul('http://localhost:<%= node['consul']['ports']['http'] || 8500 %>/v1', '<%= node['consul']['config_dir'] %>', '<%= node['consul']['install_dir'] %>/consul', <%= node['consul']['ports']['serf_lan'] || 8301 %>);
$aws = new Aws(ENVIRONMENT, '<%= node['aws']['region'] %>', 'default');

//Initialize consul external services
define('EXTERNAL_SERVICES', '<%= @external_services %>');

//Change home path for the aws command line tool
putenv('HOME='.'/home/<%= node['user'] %>/');
putenv('PATH='.getenv('PATH').':/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'); 

//Load consul configuration from the config file
$consul->loadConfiguration();

//Check the current status of consul on the current server
if (!is_null($current_instance   = $aws->getCurrentInstance())) {
    $current_ip         = $current_instance['PrivateIpAddress'];
    $current_tag        = $aws->getTag('consul', $current_instance['Tags']);
    
    $attempts           = 5;
    
    // Check to see if the cluster was started
    while ($attempts--) {
        
        //Get list of the instances already runing as a cluster, if there is any the bootstraping process is already done
        $cluster_instances  = $aws->getInstancesByTag('consul', 'hydra');
            
        // Get all the cluster instances we can join, if a cluster is set up, otherwise get all the bootstrap instances we can join
        $instancesToJoin    = count($cluster_instances)? $cluster_instances : $aws->getInstancesByTag('consul', 'bootstrap2');
    
        //Add the list of instances to the join list of consul
        $instances_ip = array_diff($aws->getIpFromInstances($instancesToJoin), array($current_ip));
        $updated = $consul->addServerListToJoinList($instances_ip);
        if($updated){
            $consul->joinMultipleServers($instances_ip);
            $consul->saveConfiguration();
            $consul->reloadAgent();
        }
    
        // Which type of tag should we have
        $tag = empty($consul->getLeader()) ? 'bootstrap2': 'hydra';
    
        // Update the tags accordingly, depending whether or not we're in a cluster
        if ($tag !== $current_tag) {
            $aws->updateInstanceTag($current_instance['InstanceId'], 'consul', ($current_tag = $tag));
    
            // When cluster first reaches quorum, register external services
            if($tag == 'hydra'){
                $external_services = json_decode(EXTERNAL_SERVICES);
                foreach ($external_services as $external_service) $consul->addExternalService($external_service);
            }
        }
        
        if ($current_tag == 'hydra')
            break;
        
        sleep(5);
    }
}
