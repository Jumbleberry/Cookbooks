#!/bin/bash
### BEGIN INIT INFO
# Provides:          consul
# Required-Start:    $network $remote_fs $syslog
# Required-Stop:     $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Consul Service Discovery Platform
# Description:       Consul is a tool for discovering and configuring services
#                    in your infrastructure. It provides several key features:
#                       * Service Discovery
#                       * Health Checking
#                       * Key/Valuye Store
#                       * Multi Datacenter
### END INIT INFO

if [ -f <%= node['consul']['etc_config_dir'] %> ]; then
. <%= node['consul']['etc_config_dir'] %>
fi

export GOMAXPROCS=${GOMAXPROCS}

CMD="<%= Chef::Consul.active_binary(node) %> agent -config-dir <%= node['consul']['config_dir'] %>"
NAME="consul"

PIDFILE="/var/run/$NAME.pid"
LOGFILE="<%= @consul_logfile %>"

STARTIMEOUT=5
STOPTIMEOUT=30

get_pid() {
    cat "$PIDFILE"
}

is_running() {
    [ -f "$PIDFILE" ] && ps `get_pid` > /dev/null 2>&1
}

case "$1" in
    start)
    if is_running; then
        echo "$NAME already running"
    else
        echo "Starting $NAME"
        exec 2> >(while IFS= read -r line; do logger -t consul "$line"; done)
        ${CMD[@]} >> "$LOGFILE" &
        CONSULPID=$!
        echo $CONSULPID > "$PIDFILE"
        TIMEOUT="$STARTIMEOUT"
        sleep <%= @startup_sleep %>
        while [ $TIMEOUT -gt 0 ]; do
            if is_running; then
                break
                sleep 1
                let TIMEOUT=${TIMEOUT}-1
            fi
        done
        if [ $TIMEOUT -eq 0 ]; then
            echo "Unable to start $NAME, see $LOGFILE"
            exit 1
        fi
        exit 0
    fi
    ;;
    stop)
    if is_running; then
        echo -n "Stopping $NAME..."
        CONSULPID=`get_pid`
        /bin/kill -INT "$CONSULPID" >/dev/null 2>&1
        ret=$?
        if [ $ret -eq 0 ]; then
            TIMEOUT="$STOPTIMEOUT"
            while [ $TIMEOUT -gt 0 ]; do
                kill -0 "$CONSULPID" >/dev/null 2>&1 || break
                sleep 1
                let TIMEOUT=${TIMEOUT}-1
            done
            if is_running; then
                echo "$NAME not stopped, sending SIGKILL"
                kill -9 $CONSULPID
                sleep 1
            fi
            if is_running; then
                echo "$NAME not stopped; may still be shutting down or shutdown may have failed"
                exit 1
            else
                echo "$NAME stopped"
                if [ -f "$PIDFILE" ]; then
                    rm "$PIDFILE"
                fi
                exit 0
            fi
        fi
    else
        echo "$NAME not running"
    fi
    ;;
    restart)
    $0 stop
    if is_running; then
        echo "Unable to stop $NAME, will not attempt to start"
        exit 1
    fi
    $0 start
    ;;
    status)
    if is_running; then
        echo "$NAME is running"
    else
        echo "$NAME is stopped"
        exit 1
    fi
    ;;
    reload)
    if is_running; then
        echo -n "Reloading $NAME..."
        kill -HUP `get_pid`
        sleep 1
        echo

        if ! is_running; then
            echo "$NAME has died, see $LOGFILE"
            exit 1
        fi
    else
        echo "$NAME not running"
    fi
    ;;
    *)
    echo "Usage: $0 {start|stop|restart|reload|status}"
    exit 1
    ;;
esac

exit 0
